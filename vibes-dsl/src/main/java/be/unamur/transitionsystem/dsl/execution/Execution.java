package be.unamur.transitionsystem.dsl.execution;

import java.io.File;

import be.unamur.fts.solver.Sat4JSolverFacade;
import be.unamur.fts.solver.SolverFacade;
import be.unamur.fts.solver.exception.SolverInitializationException;
import be.unamur.transitionsystem.ExecutionTree;
import be.unamur.transitionsystem.LabelledTransitionSystem;
import be.unamur.transitionsystem.Transition;
import be.unamur.transitionsystem.dsl.exception.ExecutionException;
import be.unamur.transitionsystem.fts.FeaturedTransition;
import be.unamur.transitionsystem.fts.FeaturedTransitionSystem;
import be.unamur.transitionsystem.test.TestCase;
import be.unamur.transitionsystem.test.execution.RelaxedFtsTestCaseRunner;
import be.unamur.transitionsystem.test.execution.RelaxedTestCaseRunner;
import be.unamur.transitionsystem.test.execution.StrictFtsTestCaseRunner;
import be.unamur.transitionsystem.test.execution.StrictTestCaseRunner;

/**
 * This class contains methods to execute test cases on transition systems. The
 * execution returns an execution tree representing the possibles paths followed
 * in the transition system.
 *
 * @see ExecutionTree
 *
 * @author Xavier Devroey - xavier.devroey@unamur.be
 */
public class Execution {

    /**
     * Executes the given test case on the given transition system in a strict
     * way. Strinct execution means that the sequence of transitions in the
     * transition system must correspond exactly to the sequence of actions in
     * the test case. For instance, the test case is (a,b,c) will be executed on
     * the transition system
     * <pre>
     * i -a-&gt; s1 -b-&gt; s2 -c-&gt; i
     * </pre> But not on the transition system
     * <pre>
     * i -a-&gt; s1 -b-&gt; s2 --&gt; s3 -c-&gt; i
     * </pre> where the transition s2 to s3 has no action.
     *
     * @param testCase The test case to execute.
     * @param lts The transition system on which the test case must be executed.
     * @return The execution tree, representing the different sequences of
     * transitions fired when executing the test case on the transition system.
     */
    public static ExecutionTree<Transition> launchStrictExecution(TestCase testCase,
            LabelledTransitionSystem lts) {
        StrictTestCaseRunner runner = new StrictTestCaseRunner();
        return runner.run(lts, testCase);
    }

    /**
     * Executes the given test case on the given transition system in a strict
     * way. Strinct execution means that the sequence of transitions in the
     * transition system must correspond exactly to the sequence of actions in
     * the test case. For instance, the test case is (a,b,c) will be executed on
     * the transition system
     * <pre>
     * i -a-&gt; s1 -b-&gt; s2 -c-&gt; i
     * </pre> But not on the transition system
     * <pre>
     * i -a-&gt; s1 -b-&gt; s2 --&gt; s3 -c-&gt; i
     * </pre> where the transition s2 to s3 has no action.
     *
     * @param testCase The test case to execute.
     * @param fts The transition system on which the test case must be executed.
     * @param solver The solver to use for the FTS execution. It has to be
     * initialised with the variability model.
     * @return The execution tree, representing the different sequences of
     * transitions fired when executing the test case on the transition system.
     */
    public static ExecutionTree<FeaturedTransition> launchStrictExecution(
            TestCase testCase, FeaturedTransitionSystem fts, SolverFacade solver) {
        StrictFtsTestCaseRunner runner = new StrictFtsTestCaseRunner(solver);
        return runner.run(fts, testCase);
    }

    /**
     * Executes the given test case on the given transition system in a strict
     * way. Strinct execution means that the sequence of transitions in the
     * transition system must correspond exactly to the sequence of actions in
     * the test case. For instance, the test case is (a,b,c) will be executed on
     * the transition system
     * <pre>
     * i -a-&gt; s1 -b-&gt; s2 -c-&gt; i
     * </pre> But not on the transition system
     * <pre>
     * i -a-&gt; s1 -b-&gt; s2 --&gt; s3 -c-&gt; i
     * </pre> where the transition s2 to s3 has no action.
     *
     * @param testCase The test case to execute.
     * @param fts The transition system on which the test case must be executed.
     * @param featureMappingFile The file containing the feaure mapping
     * generated by the TVLParser tool for a TVL model.
     * @return The execution tree, representing the different sequences of
     * transitions fired when executing the test case on the transition system.
     */
    public static ExecutionTree<FeaturedTransition> launchStrictExecution(
            TestCase testCase, FeaturedTransitionSystem fts, File featureMappingFile) {
        SolverFacade solver;
        try {
            solver = new Sat4JSolverFacade(featureMappingFile);
        } catch (SolverInitializationException e) {
            throw new ExecutionException("Error while initilizing SAT4J Solver!", e);
        }
        return launchStrictExecution(testCase, fts, solver);
    }

    /**
     * Executes the given test case on the given transition system in a strict
     * way. Strinct execution means that the sequence of transitions in the
     * transition system must correspond exactly to the sequence of actions in
     * the test case. For instance, the test case is (a,b,c) will be executed on
     * the transition system
     * <pre>
     * i -a-&gt; s1 -b-&gt; s2 -c-&gt; i
     * </pre> But not on the transition system
     * <pre>
     * i -a-&gt; s1 -b-&gt; s2 --&gt; s3 -c-&gt; i
     * </pre> where the transition s2 to s3 has no action.
     *
     * @param testCase The test case to execute.
     * @param fts The transition system on which the test case must be executed.
     * @param featureMappingFile The file containing the feaure mapping
     * generated by the TVLParser tool for a TVL model.
     * @return The execution tree, representing the different sequences of
     * transitions fired when executing the test case on the transition system.
     */
    public static ExecutionTree<FeaturedTransition> launchStrictExecution(
            TestCase testCase, FeaturedTransitionSystem fts, String featureMappingFile) {
        return launchStrictExecution(testCase, fts, new File(featureMappingFile));
    }

    /**
     * Executes the given test case on the given transition system in a strict
     * way. Strinct execution means that the sequence of transitions in the
     * transition system must correspond exactly to the sequence of actions in
     * the test case. For instance, the test case is (a,b,c) will be executed on
     * the transition system
     * <pre>
     * i -a-&gt; s1 -b-&gt; s2 -c-&gt; i
     * </pre> But not on the transition system
     * <pre>
     * i -a-&gt; s1 -b-&gt; s2 --&gt; s3 -c-&gt; i
     * </pre> where the transition s2 to s3 has no action.
     *
     * @param testCase The test case to execute.
     * @param fts The transition system on which the test case must be executed.
     * @param featureMappingFile The file containing the feaure mapping
     * generated by the TVLParser tool for a TVL model.
     * @param dimacsFile The file containing the DIMACS representation of the
     * variability model generated by the TVLParser tool for a TVL model.
     * @return The execution tree, representing the different sequences of
     * transitions fired when executing the test case on the transition system.
     */
    public static ExecutionTree<FeaturedTransition> launchStrictExecution(
            TestCase testCase, FeaturedTransitionSystem fts, File dimacsFile,
            File featureMappingFile) {
        SolverFacade solver;
        try {
            solver = new Sat4JSolverFacade(dimacsFile, featureMappingFile);
        } catch (SolverInitializationException e) {
            throw new ExecutionException("Error while initilizing SAT4J Solver!", e);
        }
        StrictFtsTestCaseRunner runner = new StrictFtsTestCaseRunner(solver);
        return runner.run(fts, testCase);
    }

    /**
     * Executes the given test case on the given transition system in a strict
     * way. Strinct execution means that the sequence of transitions in the
     * transition system must correspond exactly to the sequence of actions in
     * the test case. For instance, the test case is (a,b,c) will be executed on
     * the transition system
     * <pre>
     * i -a-&gt; s1 -b-&gt; s2 -c-&gt; i
     * </pre> But not on the transition system
     * <pre>
     * i -a-&gt; s1 -b-&gt; s2 --&gt; s3 -c-&gt; i
     * </pre> where the transition s2 to s3 has no action.
     *
     * @param testCase The test case to execute.
     * @param fts The transition system on which the test case must be executed.
     * @param featureMappingFile The file containing the feaure mapping
     * generated by the TVLParser tool for a TVL model.
     * @param dimacsFile The file containing the DIMACS representation of the
     * variability model generated by the TVLParser tool for a TVL model.
     * @return The execution tree, representing the different sequences of
     * transitions fired when executing the test case on the transition system.
     */
    public static ExecutionTree<FeaturedTransition> launchStrictExecution(
            TestCase testCase, FeaturedTransitionSystem fts, String dimacsFile,
            String featureMappingFile) {
        return launchStrictExecution(testCase, fts, new File(dimacsFile), new File(
                featureMappingFile));
    }

    /**
     * Executes the given test case on the given transition system in a relaxed
     * way. Relaxed execution means that the sequence of transitions in the
     * transition system may include transition with no actions (sometimes
     * called teta transitions) when executing the sequence of actions in the
     * test case. For instance, the test case is (a,b,c) will be executed on the
     * 2 following transition systems
     * <pre>
     * i -a-&gt; s1 -b-&gt; s2 -c-&gt; i
     * i -a-&gt; s1 -b-&gt; s2 --&gt; s3 -c-&gt; i
     * </pre>
     *
     * @param testCase The test case to execute.
     * @param lts The transition system on which the test case must be executed.
     * @return The execution tree, representing the different sequences of
     * transitions fired when executing the test case on the transition system.
     */
    public static ExecutionTree<Transition> launchRelaxedExecution(TestCase testCase,
            LabelledTransitionSystem lts) {
        RelaxedTestCaseRunner runner = new RelaxedTestCaseRunner();
        return runner.run(lts, testCase);
    }

    /**
     * Executes the given test case on the given transition system in a relaxed
     * way. Relaxed execution means that the sequence of transitions in the
     * transition system may include transition with no actions (sometimes
     * called teta transitions) when executing the sequence of actions in the
     * test case. For instance, the test case is (a,b,c) will be executed on the
     * 2 following transition systems
     * <pre>
     * i -a-&gt; s1 -b-&gt; s2 -c-&gt; i
     * i -a-&gt; s1 -b-&gt; s2 --&gt; s3 -c-&gt; i
     * </pre>
     *
     * @param testCase The test case to execute.
     * @param fts The transition system on which the test case must be executed.
     * @param featureMappingFile The file containing the feaure mapping
     * generated by the TVLParser tool for a TVL model.
     * @return The execution tree, representing the different sequences of
     * transitions fired when executing the test case on the transition system.
     */
    public static ExecutionTree<FeaturedTransition> launchRelaxedExecution(
            TestCase testCase, FeaturedTransitionSystem fts, File featureMappingFile) {
        SolverFacade solver;
        try {
            solver = new Sat4JSolverFacade(featureMappingFile);
        } catch (SolverInitializationException e) {
            throw new ExecutionException("Error while initilizing SAT4J Solver!", e);
        }
        RelaxedFtsTestCaseRunner runner = new RelaxedFtsTestCaseRunner(solver);
        return runner.run(fts, testCase);
    }

    /**
     * Executes the given test case on the given transition system in a relaxed
     * way. Relaxed execution means that the sequence of transitions in the
     * transition system may include transition with no actions (sometimes
     * called teta transitions) when executing the sequence of actions in the
     * test case. For instance, the test case is (a,b,c) will be executed on the
     * 2 following transition systems
     * <pre>
     * i -a-&gt; s1 -b-&gt; s2 -c-&gt; i
     * i -a-&gt; s1 -b-&gt; s2 --&gt; s3 -c-&gt; i
     * </pre>
     *
     * @param testCase The test case to execute.
     * @param fts The transition system on which the test case must be executed.
     * @param featureMappingFile The file containing the feaure mapping
     * generated by the TVLParser tool for a TVL model.
     * @return The execution tree, representing the different sequences of
     * transitions fired when executing the test case on the transition system.
     */
    public static ExecutionTree<FeaturedTransition> launchRelaxedExecution(
            TestCase testCase, FeaturedTransitionSystem fts, String featureMappingFile) {
        return launchRelaxedExecution(testCase, fts, new File(featureMappingFile));
    }

    /**
     * Executes the given test case on the given transition system in a relaxed
     * way. Relaxed execution means that the sequence of transitions in the
     * transition system may include transition with no actions (sometimes
     * called teta transitions) when executing the sequence of actions in the
     * test case. For instance, the test case is (a,b,c) will be executed on the
     * 2 following transition systems
     * <pre>
     * i -a-&gt; s1 -b-&gt; s2 -c-&gt; i
     * i -a-&gt; s1 -b-&gt; s2 --&gt; s3 -c-&gt; i
     * </pre>
     *
     * @param testCase The test case to execute.
     * @param fts The transition system on which the test case must be executed.
     * @param featureMappingFile The file containing the feaure mapping
     * generated by the TVLParser tool for a TVL model.
     * @param dimacsFile The file containing the DIMACS representation of the
     * variability model generated by the TVLParser tool for a TVL model.
     * @return The execution tree, representing the different sequences of
     * transitions fired when executing the test case on the transition system.
     */
    public static ExecutionTree<FeaturedTransition> launchRelaxedExecution(
            TestCase testCase, FeaturedTransitionSystem fts, File dimacsFile,
            File featureMappingFile) {
        SolverFacade solver;
        try {
            solver = new Sat4JSolverFacade(dimacsFile, featureMappingFile);
        } catch (SolverInitializationException e) {
            throw new ExecutionException("Error while initilizing SAT4J Solver!", e);
        }
        RelaxedFtsTestCaseRunner runner = new RelaxedFtsTestCaseRunner(solver);
        return runner.run(fts, testCase);
    }

    /**
     * Executes the given test case on the given transition system in a relaxed
     * way. Relaxed execution means that the sequence of transitions in the
     * transition system may include transition with no actions (sometimes
     * called teta transitions) when executing the sequence of actions in the
     * test case. For instance, the test case is (a,b,c) will be executed on the
     * 2 following transition systems
     * <pre>
     * i -a-&gt; s1 -b-&gt; s2 -c-&gt; i
     * i -a-&gt; s1 -b-&gt; s2 --&gt; s3 -c-&gt; i
     * </pre>
     *
     * @param testCase The test case to execute.
     * @param fts The transition system on which the test case must be executed.
     * @param featureMappingFile The file containing the feaure mapping
     * generated by the TVLParser tool for a TVL model.
     * @param dimacsFile The file containing the DIMACS representation of the
     * variability model generated by the TVLParser tool for a TVL model.
     * @return The execution tree, representing the different sequences of
     * transitions fired when executing the test case on the transition system.
     */
    public static ExecutionTree<FeaturedTransition> launchRelaxedExecution(
            TestCase testCase, FeaturedTransitionSystem fts, String dimacsFile,
            String featureMappingFile) {
        return launchRelaxedExecution(testCase, fts, new File(dimacsFile), new File(
                featureMappingFile));
    }

}
